// https://gist.github.com/addyosmani/1184226/raw/1a155851c06fe19e8675fb7cf87e56c981b67fc4/jQueryPluginPatterns.js
;(function ($, undefined) {

    // Create the defaults, only once!
    var defaults = {
        min: 0.00,
        max: null,
        step: 10,
        interval: 200
    };

    // The actual plugin constructor
    function Spinner(element, options) {
        this.element = element;
        this.options = $.extend({}, defaults, this.options);
        this.init();
    }
    
    Spinner.prototype.init = function () {
        
        var self = this;
        
        var interval;
        
        var input = $(this.element), wrap = input.wrap('<div class="spinner" />'),
            spinUp = $('<div class="increase"></div>').insertAfter(input),
            spinDn = $('<div class="decrease"></div>').insertAfter(input);
        
        spinUp.click(function() {spin(input, +self.options.step);});
        spinDn.click(function() {spin(input, -self.options.step);});
        
        spinUp.mousedown(function() {interval = setInterval(function() {spinUp.trigger('click');}, self.options.interval);});
        spinDn.mousedown(function() {interval = setInterval(function() {spinDn.trigger('click');}, self.options.interval);});
        
        $().add(spinUp).add(spinDn).bind('mouseup mouseout', function(e) {clearInterval(interval);});
        
        input.bind('keydown', function(e) {
            if (e.keyCode == 38) {spinUp.trigger('click'); return false;}
            if (e.keyCode == 40) {spinDn.trigger('click'); return false;}
        })
        
        var spin = function(input, step) {
            var value = parseFloat(input.val());
            if (isNaN(value)) value = 0.00;
            value += step;
            if (self.options.min !== null && value < self.options.min) value = self.options.min;
            if (self.options.max !== null &&value > self.options.max) value = self.options.max;
            input.val(value.toFixed(2));
        };

    };
    
    // A really lightweight plugin wrapper around the constructor, 
    // preventing against multiple instantiations
    $.fn.spinner = function (options) {
        return this.each(function () {
            if (!$.data(this, "spinner")) {
                $.data(this, "spinner", new Spinner(this, options));
            }
        });
    }

})(jQuery);